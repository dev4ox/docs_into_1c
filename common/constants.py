from pathlib import Path

# path | dir
CWD = Path.cwd()
DIR_DATA = Path(CWD, "test_data")
DIR_DATA_INPUT = Path(DIR_DATA, "input")
DIR_DATA_OUTPUT = Path(DIR_DATA, "output")
PATH_DATA_INTERMEDIATE_XLSX_FILE = Path(DIR_DATA_OUTPUT, "intermediate.xlsx")

# synonyms
PRODUCT_NAMES = ["Светильник", "Прожектор", "Лампа", "Осветительный прибор", "Лам. "]
SYNONYMS = {
    "Номенклатура": [
        "серия", "наименование позиции", "наименование", "товар"
    ],
    "Мощность, Вт": [
        "мощность светильника", "энергопотребление", "потребляемая мощность",
        "номинальная мощность", "мощность", "Вт", "W"
    ],
    "Св. поток, Лм": [
        "световой поток", "номинальный световой поток", "Лм", "Lm",
        "общий световой поток модуля светильника"
    ],
    "IP": [
        "ip", "степень защиты", "защита от пыли и влаги", "степень защиты по ГОСТ"
    ],
    "Габариты": [
        "размеры", "габариты", "габаритные размеры",
        "габаритные размеры светильника (без выносных элементов)"
    ],
    "Длина, мм": [
        "длина", "l"
    ],
    "Ширина, мм": [
        "ширина", "b"
    ],
    "Высота, мм": [
        "высота", "h"
    ],
    "Рассеиватель": [
        "рассеиватель", "материал рассеивателя"
    ],
    "Цвет. температура, К": [
        "цветовая температура", "цвет свечения", "температура цвета",
        "коррелированная цветовая температура", "коррелированная цветовая температура по ГОСТ",
        "к"
    ],
    "Вес, кг": [
        "вес", "масса", "общий вес", "нетто", "кг"
    ],
    "Напряжение, В": [
        "входное напряжение", "напряжение", "номинальное напряжение",
        "напряжение питания", "номинальное напряжение питания сети",
        "в", "v"
    ],
    "Температура эксплуатации": [
        "температура", "температура эксплуатации"
    ],
    "Материал корпуса": [
        "материал корпуса", "материал изделия"
    ],
    "Тип": [
        "тип", "тип крепления", "способ монтажа", "назначение",
        "монтаж", "модификация", "установка на", "вид крепления", "тип монтажа светильника"
    ],
    "Срок службы (работы) светильника": [
        "срок службы", "срок работы", "срок эксплуатации", "время работы",
        "эксплуатационный срок", "время службы"
    ],
    "Тип КСС": [
        "тип ксс", "ксс", "линза", "кривая(ые) сила света",
        "кривая", "угол", "тип кривой силы света", "угол излучения",
        "светораспределение", "угол светового излучения",
        "класс светораспределения", "угол свечения"
    ],
    "Род тока": [
        "род тока", "тип питания", "род измеряемого тока", "ток"
    ],
    "Гарантия": [
        "гарантия", "гарантийный срок", "срок гарантии",
        "гарантийный срок службы", "гарантийный срок эксплуатации",
        "гарантийный срок работы"
    ],
    "Индекс цветопередачи (CRI, Ra)": [
        "cri", "ra", "индекс цветопередачи, ra", "индекс цветопередачи (cri)",
        "цветовая передача"
    ],
    "Класс защиты от поражения электрическим током": [
        "класс защиты от поражения электрическим током",
        "класс защиты от поражения электрическим током по ГОСТ",
        "класс защиты", "тип защиты от поражения электрическим током"
    ],
    "Цвет корпуса": [
        "цвет корпуса", "цвет изделия", "цвет покраски", "цвет"
    ],
    "Коэффициент пульсаций": [
        "коэффициент пульсаций", "пульсация светового потока", "значение пульсации"
    ]
}

import pandas as pd
from common.constants import SYNONYMS

def count_valid_chars(row):
    return sum(1 for value in row if str(value).strip().lower() != "не указано" and pd.notna(value))

def determine_min_characteristics(df: pd.DataFrame) -> int:
    valid_counts = df.apply(count_valid_chars, axis=1)
    avg_chars = valid_counts.mean()
    min_chars = max(2, int(avg_chars * 0.6))  # Минимум 60% от среднего количества характеристик
    return min_chars

def normalize_column_names(df: pd.DataFrame) -> pd.DataFrame:
    synonym_map = {synonym.lower(): key for key, synonyms in SYNONYMS.items() for synonym in synonyms}
    df.columns = [synonym_map.get(col.lower(), col) for col in df.columns]
    return df

def filter_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    df = normalize_column_names(df)
    min_characteristics = determine_min_characteristics(df)
    filtered_df = df[df.apply(count_valid_chars, axis=1) >= min_characteristics]
    return filtered_df
