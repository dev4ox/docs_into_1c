from pathlib import Path
import pandas as pd
import run_models


if __name__ == "__main__":
    input_file_path = Path("test_data", "input", "ТЗ для 213054.xlsx")
    input_prompt = '''
Задача – проанализировать входной текст и извлечь параметры в один JSON-словарь с ключами (значения выводи как строки):
"Номенклатура", "Мощность, Вт", "Св. поток, Лм", "IP", "Габариты", "Длина, мм", "Ширина, мм", "Высота, мм", "Рассеиватель", "Цвет. температура, К", "Вес, кг", "Напряжение, В", "Температура эксплуатации", "Срок службы (работы) светильника", "Тип КСС", "Род тока", "Гарантия", "Индекс цветопередачи (CRI, Ra)", "Цвет корпуса", "Коэффициент пульсаций", "Коэффициент мощности (Pf)", "Класс взрывозащиты (Ex)", "Класс пожароопасности", "Класс защиты от поражения электрическим током", "Материал корпуса", "Тип", "Прочее"
Инструкция:
Входной текст – одна строка, в которой параметры могут быть разделены запятыми, точками с запятой, дефисами, двоеточиями и пробелами. Если значение выражено диапазоном или с квалификаторами (например, "не более", "не менее", "от X до Y", "±10", "+-10", "около"), включай всю фразу с диапазоном, с цифрами, без единиц измерения. Если параметр отсутствует или его значение не может быть корректно извлечено, возвращай "не указано". Если есть дополнительные характеристики, не подходящие к стандартным полям, запиши их в "Прочее".
Пример работы:
Входящие данные (ты должен их обработать):
"Наименование продукции: Прожектор светодиодный ASD СДО-2-20 20W или аналог. Энергопотребление, не более, Вт: 20; Входное напряжение: 85-265 В; Цветовая температура, К, не менее: 6500; Коэффициент пульсаций, не более: 5%; Угол свечения: 120°; Степень защиты, не менее IP: 65; Световой поток, Лм: не менее 1600; Габаритные размеры (L, b, h): 178x100x138; Время работы, не менее: 50 000 часов; Кронштейн крепления."
Выходящий результат (в таком формате ты должен вывести):
{
"Номенклатура": "Прожектор светодиодный ASD СДО-2-20 20W или аналог",
"Мощность, Вт": "не более 20",
"Св. поток, Лм": "не менее 1600",
"IP": "не менее 65",
"Габариты": "178x100x138",
"Длина, мм": "178",
"Ширина, мм": "100",
"Высота, мм": "138",
"Рассеиватель": "не указано",
"Цвет. температура, К": "не менее 6500",
"Вес, кг": "не указано",
"Напряжение, В": "85-265",
"Температура эксплуатации": "не указано",
"Срок службы (работы) светильника": "не менее 50 000",
"Тип КСС": "120",
"Род тока": "не указано",
"Гарантия": "не указано",
"Индекс цветопередачи (CRI, Ra)": "не указано",
"Цвет корпуса": "не указано",
"Коэффициент пульсаций": "не указано",
"Коэффициент мощности (Pf)": "не указано",
"Класс взрывозащиты (Ex)": "не указано",
"Класс пожароопасности": "не указано",
"Класс защиты от поражения электрическим током": "не указано",
"Материал корпуса": "не указано",
"Тип": "не указано",
"Прочее": "Кронштейн крепления"
}
    '''
    parser = run_models.UnifiedExcelParser(input_file_path)
    parser.process()
    filled_forms = []
    final_columns = ["Номенклатура", "Мощность, Вт", "Св. поток, Лм", "IP", "Габариты", "Длина, мм",
                     "Ширина, мм", "Высота, мм", "Рассеиватель", "Цвет. температура, К", "Вес, кг",
                     "Напряжение, В", "Температура эксплуатации", "Срок службы (работы) светильника",
                     "Тип КСС", "Род тока", "Гарантия", "Индекс цветопередачи (CRI, Ra)", "Цвет корпуса",
                     "Коэффициент пульсаций", "Коэффициент мощности (Pf)", "Класс взрывозащиты (Ex)",
                     "Класс пожароопасности", "Класс защиты от поражения электрическим током",
                     "Материал корпуса", "Тип", "Прочее"]
    for product in parser.data:
        product_text = product["text"]
        print(product_text)
        # Можно заменить на другую функцию из run_models
        extracted = run_models.extract_gemma_2_2b_it_IQ3_M(product_text, input_prompt)
        for col in final_columns:
            if col not in extracted:
                extracted[col] = "не указано"
        filled_forms.append(extracted)
    df_form = pd.DataFrame(filled_forms, columns=final_columns)
    print("\nЗаполненная форма:")
    print(df_form.to_string(index=False))
    # !!! testing out
    output_file = "output1.xlsx"
    run_models.append_df_to_excel(output_file, df_form, sheet_name="Sheet1")
    print(f"\nДанные успешно добавлены в файл {output_file}.")