from pathlib import Path
import pandas as pd
import run_models


if __name__ == "__main__":
    input_file_path = Path("test_data", "input", "ТЗ для 213054.xlsx")
    input_prompt = '''
    Ты эксперт по извлечению данных из технических описаний светильников.
    Твоя задача – проанализировать входной текст и извлечь параметры для заполнения таблицы "Форма 2". Выводи ровно один JSON-словарь с ключами (значения выводи как строки):
    "Номенклатура", "Мощность, Вт", "Св. поток, Лм", "IP", "Длина, мм", "Ширина, мм", "Высота, мм", "Габариты", "Рассеиватель", "Цвет. температура, К", "Вес, кг", "Напряжение, В", "Срок службы (работы) светильника", "Температура эксплуатации", "Материал корпуса", "Тип", "Тип КСС", "Род тока", "Гарантия", "Индекс цветопередачи (CRI, Ra)", "Класс защиты от поражения электрическим током", "Коэффициент мощности (Pf)", "С регулятором яркости (диммирование)", "Ударопрочность", "Класс взрывозащиты (Ex)", "Класс пожароопасности", "Цвет корпуса", "Коэффициент пульсаций", "Прочее".
    
    Входной текст – одна строка, в которой параметры могут быть разделены запятыми, точками с запятой, дефисами, двоеточиями и пробелами. Если значение выражено диапазоном или с квалификаторами (например, "не более", "не менее", "от X до Y", "±10", "+-10", "около"), включай всю фразу с единицами измерения. Если параметр отсутствует или его значение не может быть корректно извлечено, возвращай "не указано". Если есть дополнительные характеристики, не подходящие к стандартным полям, помести их в поле "Прочее".
    
    Пример 1:
    Вход:
    "Наименование продукции: Прожектор светодиодный ASD СДО-2-20 20W или аналог. Энергопотребление, не более, Вт: 20; Входное напряжение: 85-265 В; Цветовая температура, К, не менее: 6500; Коэффициент пульсаций, не более: 5%; Угол свечения: 120°; Степень защиты, не менее IP: 65; Световой поток, Лм: не менее 1600; Габаритные размеры (L, b, h): 178100138; Время работы, не менее: 50 000 часов; Кронштейн крепления."
    Вывод:
    {
    "Номенклатура": "Прожектор светодиодный ASD СДО-2-20 20W или аналог",
    "Мощность, Вт": "не более 20 Вт",
    "Св. поток, Лм": "не менее 1600 Лм",
    "IP": "не менее 65",
    "Длина, мм": "178",
    "Ширина, мм": "100",
    "Высота, мм": "138",
    "Габариты": "178100138",
    "Рассеиватель": "не указано",
    "Цвет. температура, К": "не менее 6500",
    "Вес, кг": "не указано",
    "Напряжение, В": "85-265 В",
    "Срок службы (работы) светильника": "не менее 50 000 часов",
    "Температура эксплуатации": "не указано",
    "Материал корпуса": "не указано",
    "Тип": "не указано",
    "Тип КСС": "120°",
    "Род тока": "не указано",
    "Гарантия": "не указано",
    "Индекс цветопередачи (CRI, Ra)": "не указано",
    "Класс защиты от поражения электрическим током": "не указано",
    "Коэффициент мощности (Pf)": "не указано",
    "С регулятором яркости (диммирование)": "не указано",
    "Ударопрочность": "не указано",
    "Класс взрывозащиты (Ex)": "не указано",
    "Класс пожароопасности": "не указано",
    "Цвет корпуса": "не указано",
    "Коэффициент пульсаций": "не указано",
    "Прочее": "Кронштейн крепления"
    }
    '''
    parser = run_models.UnifiedExcelParser(input_file_path)
    parser.process()
    filled_forms = []
    final_columns = ["Номенклатура", "Мощность, Вт", "Св. поток, Лм", "IP", "Габариты", "Длина, мм",
                     "Ширина, мм", "Высота, мм", "Рассеиватель", "Цвет. температура, К", "Вес, кг",
                     "Напряжение, В", "Температура эксплуатации", "Срок службы (работы) светильника",
                     "Тип КСС", "Род тока", "Гарантия", "Индекс цветопередачи (CRI, Ra)", "Цвет корпуса",
                     "Коэффициент пульсаций", "Коэффициент мощности (Pf)", "Класс взрывозащиты (Ex)",
                     "Класс пожароопасности", "Класс защиты от поражения электрическим током",
                     "Материал корпуса", "Тип", "Прочее"]
    for product in parser.data:
        product_text = product["text"]
        print(product_text)
        # Можно заменить на другую функцию из run_models
        extracted = run_models.extract_with_mistral(product_text, input_prompt)
        for col in final_columns:
            if col not in extracted:
                extracted[col] = "не указано"
        filled_forms.append(extracted)
    df_form = pd.DataFrame(filled_forms, columns=final_columns)
    print("\nЗаполненная форма:")
    print(df_form.to_string(index=False))
    output_file = "output.xlsx"
    run_models.append_df_to_excel(output_file, df_form, sheet_name="Sheet1")
    print(f"\nДанные успешно добавлены в файл {output_file}.")